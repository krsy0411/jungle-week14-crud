services:
  postgres:
    image: postgres:16-alpine
    container_name: board_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: board_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - board_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: board_redis
    networks:
      - board_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: board_backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_NAME: board_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      PORT: 3000
    ports:
      - "3000:3000"
    networks:
      - board_network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: board_frontend
    depends_on:
      - backend
    ports:
      - "80:80"
    networks:
      - board_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  board_network:
    driver: bridge
