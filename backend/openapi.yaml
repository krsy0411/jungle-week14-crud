openapi: 3.0.3
info:
  title: 게시판 CRUD API
  description: |
    간단한 게시판 애플리케이션의 RESTful API 명세서
    
    ## 주요 기능
    - 사용자 인증 및 권한 관리 (JWT)
    - 게시글 CRUD
    - 댓글 CRUD
    - 페이지네이션 및 검색
    
    ## 인증 방식
    Bearer Token (JWT) 사용
    
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api
    description: 로컬 개발 서버
  - url: https://api.example.com/api
    description: 프로덕션 서버

tags:
  - name: Auth
    description: 인증 및 인가 관련 API
  - name: Users
    description: 사용자 관리 API
  - name: Posts
    description: 게시글 관리 API
  - name: Comments
    description: 댓글 관리 API
  - name: Likes
    description: 좋아요 관리 API

# 보안 스킴 정의
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT 토큰을 사용한 인증

  # 재사용 가능한 스키마 정의
  schemas:
    # 공통 응답 스키마
    Error:
      type: object
      required:
        - statusCode
        - message
      properties:
        statusCode:
          type: integer
          example: 400
        message:
          type: string
          example: "요청 데이터가 올바르지 않습니다"
        error:
          type: string
          example: "Bad Request"

    PaginationMeta:
      type: object
      properties:
        total:
          type: integer
          description: 전체 항목 수
          example: 100
        page:
          type: integer
          description: 현재 페이지 (1부터 시작)
          example: 1
        limit:
          type: integer
          description: 페이지당 항목 수
          example: 10
        totalPages:
          type: integer
          description: 전체 페이지 수
          example: 10

    # 사용자 스키마
    User:
      type: object
      required:
        - id
        - email
        - username
        - createdAt
      properties:
        id:
          type: integer
          format: int64
          example: 1
        email:
          type: string
          format: email
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
          example: user@example.com
        username:
          type: string
          minLength: 3
          maxLength: 20
          pattern: '^[a-zA-Z0-9_-]+$'
          description: "알파벳, 숫자, 언더스코어, 하이픈만 허용"
          example: johndoe
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

    UserCreateRequest:
      type: object
      required:
        - email
        - username
        - password
      properties:
        email:
          type: string
          format: email
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
          example: user@example.com
        username:
          type: string
          minLength: 3
          maxLength: 20
          pattern: '^[a-zA-Z0-9_-]+$'
          description: "알파벳, 숫자, 언더스코어, 하이픈만 허용"
          example: johndoe
        password:
          type: string
          format: password
          minLength: 8
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$'
          description: "최소 8자, 대소문자, 숫자, 특수문자 각 1개 이상 포함"
          example: "SecurePass123!"

    # 인증 스키마
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
          example: user@example.com
        password:
          type: string
          format: password
          example: "SecurePass123!"

    LoginResponse:
      type: object
      required:
        - accessToken
        - user
      properties:
        accessToken:
          type: string
          description: JWT 액세스 토큰
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/User'

    # 게시글 스키마
    Post:
      type: object
      required:
        - id
        - title
        - content
        - authorId
        - createdAt
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          minLength: 1
          maxLength: 50
          example: "첫 번째 게시글"
        content:
          type: string
          minLength: 1
          example: "게시글 내용입니다."
        authorId:
          type: integer
          format: int64
          example: 1
        author:
          $ref: '#/components/schemas/User'
        commentCount:
          type: integer
          description: 댓글 수
          example: 5
        likeCount:
          type: integer
          description: 좋아요 수
          example: 10
        isLiked:
          type: boolean
          description: 현재 사용자의 좋아요 여부 (인증된 경우만)
          example: false
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

    PostCreateRequest:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 50
          example: "새 게시글 제목"
        content:
          type: string
          minLength: 1
          example: "게시글 내용을 작성합니다."

    PostUpdateRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 50
          example: "수정된 게시글 제목"
        content:
          type: string
          minLength: 1
          example: "수정된 게시글 내용입니다."

    PostListResponse:
      type: object
      required:
        - data
        - meta
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    # 댓글 스키마
    Comment:
      type: object
      required:
        - id
        - content
        - postId
        - authorId
        - createdAt
      properties:
        id:
          type: integer
          format: int64
          example: 1
        content:
          type: string
          minLength: 1
          maxLength: 500
          example: "댓글 내용입니다."
        postId:
          type: integer
          format: int64
          example: 1
        authorId:
          type: integer
          format: int64
          example: 1
        author:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

    CommentCreateRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          minLength: 1
          maxLength: 500
          example: "댓글을 작성합니다."

    CommentUpdateRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          minLength: 1
          maxLength: 500
          example: "수정된 댓글 내용입니다."

    CommentListResponse:
      type: object
      required:
        - data
        - meta
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    # 좋아요 스키마
    LikeResponse:
      type: object
      required:
        - liked
        - likeCount
      properties:
        liked:
          type: boolean
          description: 좋아요 상태
          example: true
        likeCount:
          type: integer
          description: 현재 게시글의 총 좋아요 수
          example: 11

    # Validation 에러 스키마
    ValidationError:
      type: object
      required:
        - statusCode
        - message
        - errors
      properties:
        statusCode:
          type: integer
          example: 422
        message:
          type: string
          example: "입력 데이터 검증 실패"
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: "email"
              message:
                type: string
                example: "유효한 이메일 주소가 아닙니다"

  # 재사용 가능한 파라미터
  parameters:
    PageParam:
      name: page
      in: query
      description: 페이지 번호 (1부터 시작)
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1

    LimitParam:
      name: limit
      in: query
      description: 페이지당 항목 수
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10

    SearchParam:
      name: search
      in: query
      description: 검색 키워드
      required: false
      schema:
        type: string

    PostIdParam:
      name: postId
      in: path
      description: 게시글 ID
      required: true
      schema:
        type: integer
        format: int64

    CommentIdParam:
      name: commentId
      in: path
      description: 댓글 ID
      required: true
      schema:
        type: integer
        format: int64

    UserIdParam:
      name: userId
      in: path
      description: 사용자 ID
      required: true
      schema:
        type: integer
        format: int64

  # 재사용 가능한 응답
  responses:
    Unauthorized:
      description: 인증 실패
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            statusCode: 401
            message: "인증이 필요합니다"
            error: "Unauthorized"

    Forbidden:
      description: 권한 없음
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            statusCode: 403
            message: "접근 권한이 없습니다"
            error: "Forbidden"

    NotFound:
      description: 리소스를 찾을 수 없음
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            statusCode: 404
            message: "요청한 리소스를 찾을 수 없습니다"
            error: "Not Found"

    BadRequest:
      description: 잘못된 요청
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            statusCode: 400
            message: "요청 데이터가 올바르지 않습니다"
            error: "Bad Request"

    Conflict:
      description: 리소스 충돌 (중복)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            statusCode: 409
            message: "이미 존재하는 리소스입니다"
            error: "Conflict"

    UnprocessableEntity:
      description: 요청 데이터 검증 실패
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'

    InternalServerError:
      description: 서버 내부 오류
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            statusCode: 500
            message: "서버 오류가 발생했습니다"
            error: "Internal Server Error"

# API 경로 정의
paths:
  # 인증 API
  /auth/register:
    post:
      tags:
        - Auth
      summary: 회원가입
      description: 새로운 사용자 계정을 생성합니다
      operationId: register
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: 회원가입 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/login:
    post:
      tags:
        - Auth
      summary: 로그인
      description: 이메일과 비밀번호로 로그인하여 JWT 토큰을 발급받습니다
      operationId: login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/me:
    get:
      tags:
        - Auth
      summary: 현재 사용자 정보 조회
      description: JWT 토큰으로 현재 로그인한 사용자의 정보를 조회합니다
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 사용자 정보 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # 게시글 API
  /posts:
    get:
      tags:
        - Posts
      summary: 게시글 목록 조회
      description: 페이지네이션과 검색을 지원하는 게시글 목록을 조회합니다
      operationId: getPosts
      security: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/SearchParam'
      responses:
        '200':
          description: 게시글 목록 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostListResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Posts
      summary: 게시글 작성
      description: 새로운 게시글을 작성합니다 (인증 필요)
      operationId: createPost
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreateRequest'
      responses:
        '201':
          description: 게시글 작성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /posts/{postId}:
    get:
      tags:
        - Posts
      summary: 게시글 상세 조회
      description: 특정 게시글의 상세 정보를 조회합니다
      operationId: getPost
      security: []
      parameters:
        - $ref: '#/components/parameters/PostIdParam'
      responses:
        '200':
          description: 게시글 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    patch:
      tags:
        - Posts
      summary: 게시글 수정
      description: 자신이 작성한 게시글을 수정합니다 (인증 필요)
      operationId: updatePost
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PostIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUpdateRequest'
      responses:
        '200':
          description: 게시글 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Posts
      summary: 게시글 삭제
      description: 자신이 작성한 게시글을 삭제합니다 (인증 필요)
      operationId: deletePost
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PostIdParam'
      responses:
        '204':
          description: 게시글 삭제 성공
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # 댓글 API
  /posts/{postId}/comments:
    get:
      tags:
        - Comments
      summary: 댓글 목록 조회
      description: 특정 게시글의 댓글 목록을 조회합니다 (인증 불필요)
      operationId: getComments
      security: []
      parameters:
        - $ref: '#/components/parameters/PostIdParam'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: 댓글 목록 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentListResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Comments
      summary: 댓글 작성
      description: 특정 게시글에 댓글을 작성합니다 (인증 필요)
      operationId: createComment
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PostIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreateRequest'
      responses:
        '201':
          description: 댓글 작성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /comments/{commentId}:
    patch:
      tags:
        - Comments
      summary: 댓글 수정
      description: 자신이 작성한 댓글을 수정합니다 (인증 필요)
      operationId: updateComment
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/CommentIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentUpdateRequest'
      responses:
        '200':
          description: 댓글 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Comments
      summary: 댓글 삭제
      description: 자신이 작성한 댓글을 삭제합니다 (인증 필요)
      operationId: deleteComment
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/CommentIdParam'
      responses:
        '204':
          description: 댓글 삭제 성공
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # 사용자 API
  /users/{userId}:
    get:
      tags:
        - Users
      summary: 사용자 정보 조회
      description: 특정 사용자의 공개 프로필을 조회합니다 (인증 불필요)
      operationId: getUser
      security: []
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '200':
          description: 사용자 정보 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}/posts:
    get:
      tags:
        - Users
      summary: 사용자가 작성한 게시글 목록
      description: 특정 사용자가 작성한 게시글 목록을 조회합니다 (인증 불필요)
      operationId: getUserPosts
      security: []
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: 게시글 목록 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostListResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # 좋아요 API
  /posts/{postId}/like:
    post:
      tags:
        - Likes
      summary: 게시글 좋아요 추가
      description: 특정 게시글에 좋아요를 추가합니다 (인증 필요). 이미 좋아요한 경우 무시됩니다.
      operationId: likePost
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PostIdParam'
      responses:
        '200':
          description: 좋아요 추가 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikeResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Likes
      summary: 게시글 좋아요 취소
      description: 특정 게시글의 좋아요를 취소합니다 (인증 필요)
      operationId: unlikePost
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PostIdParam'
      responses:
        '200':
          description: 좋아요 취소 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikeResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

